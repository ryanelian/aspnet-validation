{"version":3,"sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRelativeFormElement","elementName","selector","realSelector","substr","dotLocation","lastIndexOf","relativeElementName","relativeElement","document","getElementsByName","MvcValidationProviders","this","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","phone","remote","fieldSelectors","additionalfields","split","fields","_i","fieldSelectors_1","fieldSelector","fieldName","fieldElement","encodedParams","encodedParam","encodeURIComponent","push","payload","join","Promise","ok","reject","request","XMLHttpRequest","type","postData","FormData","append","open","setRequestHeader","send","onload","e","status","data","JSON","parse","responseText","statusText","onerror","ValidationService","_this","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","validateForm","form","callback","formUID","getElementUID","formValidationEvent","addProvider","addMvcProviders","mvc","scanMessages","validationMessageElements","querySelectorAll","name_1","getAttribute","parseDirectives","attributes","directives","validationAtributes","cut","a","indexOf","parameters","keys","filter","Q","directive","error","pcut","pvalue","pkey","guid4","Math","random","toString","node","x","uid","getFormValidationTask","formInputUIDs","formValidators","inputUID","tasks","map","all","then","result","every","trackFormInput","cb","validate","isProgamaticValidate","preventDefault","success","submit","catch","console","log","addEventListener","uids_1","input","classList","remove","spans","innerHTML","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","tagName","toLowerCase","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","summaryElements","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","add","removeError","__awaiter","provider","valid","resolution","_c","sent","bootstrap","event"],"mappings":"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","file":"aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * A simple IDictionary<string, string>\n */\nexport interface StringKeyValuePair {\n    [key: string]: string\n}\n\n/**\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\n */\ninterface ElementUID {\n    node: Element,\n    uid: string;\n}\n\n/**\n * Parameters passed into validation providers from the element attributes.\n * error property is read from data-val-[Provider Name] attribute.\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\n */\nexport interface ValidationDirectiveBindings {\n    error: string,\n    params: StringKeyValuePair\n}\n\n/**\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\n */\nexport type ValidationDirective = {\n    [key: string]: ValidationDirectiveBindings\n};\n\n/**\n * Validation plugin signature with multitype return.\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\n * String return signifies failed validation, which then will be used as the validation error message.\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\n */\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\n\n/**\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\n */\ntype Validator = () => Promise<boolean>;\n\n/**\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\n * @param elementName \n */\nfunction getRelativeFormElement(elementName: string, selector: string) {\n    // example elementName: Form.PasswordConfirm, Form.Email\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\n    // example result element name: Form.Password, __RequestVerificationToken\n\n    let realSelector = selector.substr(2); // Password, __RequestVerificationToken\n    let objectName = '';\n\n    let dotLocation = elementName.lastIndexOf('.');\n    if (dotLocation > -1) {\n        // Form\n        objectName = elementName.substr(0, dotLocation);\n\n        // Form.Password\n        let relativeElementName = objectName + '.' + realSelector;\n        let relativeElement = document.getElementsByName(relativeElementName)[0];\n        if (relativeElement) {\n            return relativeElement;\n        }\n    }\n\n    // __RequestVerificationToken\n    return document.getElementsByName(realSelector)[0];\n}\n\n/**\n * Contains default implementations for ASP.NET Core MVC validation attributes.\n */\nexport class MvcValidationProviders {\n    /**\n     * Validates whether the input has a value.\n     */\n    required: ValidationProvider = (value, element, params) => {\n        return Boolean(value);\n    }\n\n    /**\n     * Validates whether the input value satisfies the length contstraint.\n     */\n    stringLength: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        if (params.min) {\n            let min = parseInt(params.min);\n            if (value.length < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseInt(params.max);\n            if (value.length > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value is equal to another input value.\n     */\n    compare: ValidationProvider = (value, element, params) => {\n        if (!params.other) {\n            return true;\n        }\n\n        let otherElement = getRelativeFormElement(element.name, params.other) as HTMLInputElement;\n        if (!otherElement) {\n            return true;\n        }\n\n        return (otherElement.value === value);\n    }\n\n    /**\n     * Validates whether the input value is a number within a given range.\n     */\n    range: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        let val = parseFloat(value);\n        if (isNaN(val)) {\n            return false;\n        }\n\n        if (params.min) {\n            let min = parseFloat(params.min);\n            if (val < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseFloat(params.max);\n            if (val > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value satisfies a regular expression pattern.\n     */\n    regex: ValidationProvider = (value, element, params) => {\n        if (!value || !params.pattern) {\n            return true;\n        }\n\n        let r = new RegExp(params.pattern);\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\n     */\n    email: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // RFC822 email address with .TLD validation\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\n        // https://gist.github.com/badsyntax/719800\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\n\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\n     */\n    creditcard: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // (c) jquery-validation, MIT Licensed\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n\n        // Accept only spaces, digits and dashes\n        if (/[^0-9 \\-]+/.test(value)) {\n            return false;\n        }\n\n        var nCheck = 0,\n            nDigit = 0,\n            bEven = false,\n            n, cDigit;\n\n        value = value.replace(/\\D/g, \"\");\n\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\n        if (value.length < 13 || value.length > 19) {\n            return false;\n        }\n\n        for (n = value.length - 1; n >= 0; n--) {\n            cDigit = value.charAt(n);\n            nDigit = parseInt(cDigit, 10);\n            if (bEven) {\n                if ((nDigit *= 2) > 9) {\n                    nDigit -= 9;\n                }\n            }\n\n            nCheck += nDigit;\n            bEven = !bEven;\n        }\n\n        return (nCheck % 10) === 0;\n    }\n\n    /**\n     * Validates whether the input value is a URL.\n     */\n    url: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // (c) Diego Perini, MIT Licensed\n        // https://gist.github.com/dperini/729294\n\n        var r = new RegExp(\n            \"^\" +\n            // protocol identifier\n            \"(?:(?:https?|ftp)://)\" +\n            // user:pass authentication\n            \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n            \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n            \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n            \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n            \"|\" +\n            // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n            // TLD may end with dot\n            \"\\\\.?\" +\n            \")\" +\n            // port number\n            \"(?::\\\\d{2,5})?\" +\n            // resource path\n            \"(?:[/?#]\\\\S*)?\" +\n            \"$\", \"i\"\n        );\n\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is a phone number.\n     */\n    phone: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // Allows whitespace or dash as number separator because some people like to do that...\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\n        if (consecutiveSeparator.test(value)) {\n            return false;\n        }\n\n        let r = /^\\+?[0-9\\-\\s]+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Asynchronously validates the input value to a JSON GET API endpoint. \n     */\n    remote: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // params.additionalfields: *.Email,*.Username\n        let fieldSelectors: string[] = (params.additionalfields as string).split(',');\n        let fields: StringKeyValuePair = {};\n\n        for (let fieldSelector of fieldSelectors) {\n            let fieldName = fieldSelector.substr(2);\n            let fieldElement = getRelativeFormElement(element.name, fieldSelector) as HTMLInputElement;\n\n            let hasValue = Boolean(fieldElement && fieldElement.value);\n            if (!hasValue) {\n                continue;\n            }\n\n            fields[fieldName] = fieldElement.value;\n        }\n\n        let url: string = params['url'];\n        // console.log(fields);\n\n        let encodedParams: string[] = [];\n        for (let fieldName in fields) {\n            let encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\n            encodedParams.push(encodedParam);\n        }\n        let payload = encodedParams.join('&');\n        // console.log(payload);\n\n        return new Promise((ok, reject) => {\n            let request = new XMLHttpRequest();\n\n            if (params.type === 'Post') {\n                let postData = new FormData();\n                for (let fieldName in fields) {\n                    postData.append(fieldName, fields[fieldName]);\n                }\n                request.open('post', url);\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                request.send(payload);\n            } else {\n                request.open('get', url + '?' + payload);\n                request.send();\n            }\n\n            request.onload = e => {\n                if (request.status >= 200 && request.status < 300) {\n                    let data = JSON.parse(request.responseText);\n                    ok(data);\n                } else {\n                    reject({\n                        status: request.status,\n                        statusText: request.statusText,\n                        data: request.responseText\n                    });\n                }\n            };\n\n            request.onerror = e => {\n                reject({\n                    status: request.status,\n                    statusText: request.statusText,\n                    data: request.responseText\n                });\n            };\n        });\n    }\n}\n\n/**\n * Responsibles for managing the DOM elements and running the validation providers.\n */\nexport class ValidationService {\n    /**\n     * A key-value collection of loaded validation plugins. \n     */\n    private providers: { [name: string]: ValidationProvider } = {};\n\n    /**\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\n     */\n    private messageFor: { [id: string]: Element[] } = {};\n\n    /**\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\n     */\n    private elementUIDs: ElementUID[] = [];\n\n    /**\n     * A key-value collection of UID to Element for quick lookup. \n     */\n    private elementByUID: { [uid: string]: Element } = {};\n\n    /**\n     * A key-value collection of input UIDs for a <form> UID.\n     */\n    private formInputs: { [formUID: string]: string[] } = {};\n\n    /**\n     * A key-value map for input UID to its validator factory.\n     */\n    private validators: { [inputUID: string]: Validator } = {};\n\n    /**\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\n     */\n    private elementEvents: { [id: string]: (e: Event, callback?: Function) => any } = {};\n\n    /**\n     * A key-value map of input UID to its validation error message.\n     */\n    private summary: StringKeyValuePair = {};\n\n    /**\n     * A serialized representation of the validation error message summary rendered to the user.\n     */\n    private renderedSummaryJSON: string;\n\n    /**\n     * In milliseconds, the rate of fire of the input validation.\n     */\n    debounce = 300;\n\n    /**\n     * Registers a new validation plugin of the given name, if not registered yet.\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\n     * @param name \n     * @param callback \n     */\n    addProvider(name: string, callback: ValidationProvider) {\n        if (this.providers[name]) {\n            // First-Come-First-Serve validation plugin design.\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\n            return;\n        }\n        this.providers[name] = callback;\n    }\n\n    /**\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation. \n     */\n    private addMvcProviders() {\n        let mvc = new MvcValidationProviders();\n\n        // [Required]\n        this.addProvider('required', mvc.required);\n        // [StringLength], [MinLength], [MaxLength]\n        this.addProvider('length', mvc.stringLength);\n        this.addProvider('maxlength', mvc.stringLength);\n        this.addProvider('minlength', mvc.stringLength);\n        // [Compare]\n        this.addProvider('equalto', mvc.compare);\n        // [Range]\n        this.addProvider('range', mvc.range);\n        // [RegularExpression]\n        this.addProvider('regex', mvc.regex);\n        // [CreditCard]\n        this.addProvider('creditcard', mvc.creditcard);\n        // [EmailAddress]\n        this.addProvider('email', mvc.email);\n        // [Url]\n        this.addProvider('url', mvc.url);\n        // [Phone]\n        this.addProvider('phone', mvc.phone);\n        // [Remote]\n        this.addProvider('remote', mvc.remote);\n    }\n\n    /**\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\n     */\n    private scanMessages() {\n        let validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\n\n        for (let i = 0; i < validationMessageElements.length; i++) {\n            let e = validationMessageElements[i];\n            let name = e.getAttribute('data-valmsg-for');\n\n            if (!this.messageFor[name]) {\n                this.messageFor[name] = [];\n            }\n\n            this.messageFor[name].push(e);\n        }\n    }\n\n    /**\n     * Given attribute map for an HTML input, returns the validation directives to be executed. \n     * @param attributes \n     */\n    parseDirectives(attributes: NamedNodeMap) {\n        let directives: ValidationDirective = {};\n        let validationAtributes: StringKeyValuePair = {};\n\n        let cut = 'data-val-'.length;\n        for (let i = 0; i < attributes.length; i++) {\n            let a = attributes[i];\n            if (a.name.indexOf('data-val-') === 0) {\n                let key = a.name.substr(cut);\n                validationAtributes[key] = a.value;\n            }\n        }\n\n        for (let key in validationAtributes) {\n            if (key.indexOf('-') === -1) {\n                let parameters = Object.keys(validationAtributes).filter(Q => {\n                    return (Q !== key) && (Q.indexOf(key) === 0);\n                });\n\n                let directive: ValidationDirectiveBindings = {\n                    error: validationAtributes[key],\n                    params: {}\n                };\n\n                let pcut = (key + '-').length;\n                for (let i = 0; i < parameters.length; i++) {\n                    let pvalue = validationAtributes[parameters[i]];\n                    let pkey = parameters[i].substr(pcut);\n\n                    directive.params[pkey] = pvalue;\n                }\n\n                directives[key] = directive;\n            }\n        }\n\n        // console.log(directives);\n        return directives;\n    }\n\n    /**\n     *  Returns an RFC4122 version 4 compliant GUID.\n     */\n    private guid4() {\n        // (c) broofa, MIT Licensed\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     * Gets a UID for an DOM element.\n     * @param node \n     */\n    private getElementUID(node: Element) {\n        let x = this.elementUIDs.filter(e => {\n            return e.node === node;\n        })[0];\n\n        if (x) {\n            return x.uid;\n        }\n\n        let uid = this.guid4();\n        this.elementUIDs.push({\n            node: node,\n            uid: uid\n        });\n        this.elementByUID[uid] = node;\n        return uid;\n    }\n\n    /**\n     * Returns a Promise that returns validation result for each and every inputs within the form.\n     * @param formUID \n     */\n    private getFormValidationTask(formUID: string) {\n        let formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs || formInputUIDs.length === 0) {\n            return null;\n        }\n\n        let formValidators: Validator[] = [];\n\n        for (let i = 0; i < formInputUIDs.length; i++) {\n            let inputUID = formInputUIDs[i];\n            formValidators.push(this.validators[inputUID]);\n        }\n\n        let tasks = formValidators.map(factory => factory());\n        return Promise.all(tasks).then(result => result.every(e => e));\n    }\n\n    /**\n     * Fires off validation for elements within the provided form and then calls the callback\n     * @param form \n     * @param callback \n     */\n    validateForm = (form: HTMLFormElement, callback: Function) => {\n        let formUID = this.getElementUID(form);\n        let formValidationEvent = this.elementEvents[formUID];  \n        if (formValidationEvent) {\n            formValidationEvent(null, callback);\n        }\n    }\n\n    /**\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\n     * @param form \n     * @param inputUID \n     */\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\n        let formUID = this.getElementUID(form);\n        if (!this.formInputs[formUID]) {\n            this.formInputs[formUID] = [];\n        }\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\n        if (add) {\n            this.formInputs[formUID].push(inputUID);\n        }\n\n        if (this.elementEvents[formUID]) {\n            return;\n        }\n\n        let cb = (e: Event, callback?: Function) => {\n            let validate = this.getFormValidationTask(formUID);\n            if (!validate) {\n                return;\n            }\n\n            let isProgamaticValidate: Boolean = !e;\n            if (!isProgamaticValidate) {\n                e.preventDefault();\n            }\n            validate.then(success => {\n                if (success) {\n                    if (isProgamaticValidate) {\n                        callback(true);\n                        return;\n                    }\n                    form.submit();\n                    return;\n                }\n                if (isProgamaticValidate) {\n                    callback(false);\n                }\n            }).catch(error => {\n                console.log(error);\n            });\n        };\n\n        form.addEventListener('submit', cb);\n        form.addEventListener('reset', e => {\n            let uids = this.formInputs[formUID];\n\n            for (let uid of uids) {\n                let input = this.elementByUID[uid] as HTMLInputElement;\n                input.classList.remove('input-validation-error');\n                input.classList.remove('input-validation-valid');\n\n                let spans = this.messageFor[input.name];\n                if (spans) {\n                    for (let i = 0; i < spans.length; i++) {\n                        spans[i].innerHTML = '';\n                    }\n                }\n\n                delete this.summary[uid];\n            }\n            this.renderSummary();\n        });\n        this.elementEvents[formUID] = cb;\n    }\n\n    /**\n     * Adds an input element to be managed and validated by the service.\n     * Triggers a debounced live validation when input value changes.\n     * @param input \n     */\n    addInput(input: HTMLInputElement) {\n        let uid = this.getElementUID(input);\n\n        let directives = this.parseDirectives(input.attributes);\n        let validate = this.createValidator(input, directives);\n\n        this.validators[uid] = validate;\n        if (input.form) {\n            this.trackFormInput(input.form, uid);\n        }\n\n        if (this.elementEvents[uid]) {\n            return;\n        }\n\n        let delay;\n        let cb = e => {\n            let validate = this.validators[uid];\n            clearTimeout(delay);\n            delay = setTimeout(validate, this.debounce);\n        };\n\n        let isDropdown = input.tagName.toLowerCase() === 'select';\n        if (isDropdown) {\n            input.addEventListener('change', cb);\n        } else {\n            input.addEventListener('input', cb);\n        }\n\n        this.elementEvents[uid] = cb;\n    }\n\n    /**\n     * Scans the entire document for input elements to be validated.\n     */\n    private scanInputs() {\n        let inputs = document.querySelectorAll('[data-val=\"true\"]');\n\n        for (let i = 0; i < inputs.length; i++) {\n            let input = inputs[i] as HTMLInputElement;\n            this.addInput(input);\n        }\n    }\n\n    /**\n     * Returns a <ul> element as a validation errors summary.\n     */\n    createSummaryDOM() {\n        if (!Object.keys(this.summary).length) {\n            return null;\n        }\n\n        let ul = document.createElement('ul');\n        for (let key in this.summary) {\n            let li = document.createElement('li');\n            li.innerHTML = this.summary[key];\n            ul.appendChild(li);\n        }\n        return ul;\n    }\n\n    /**\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\n     */\n    private renderSummary() {\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (!summaryElements.length) {\n            return;\n        }\n\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\n        if (shadow === this.renderedSummaryJSON) {\n            return;\n        }\n\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        // console.log('RENDERING VALIDATION SUMMARY');\n        this.renderedSummaryJSON = shadow;\n        let ul = this.createSummaryDOM();\n\n        for (let i = 0; i < summaryElements.length; i++) {\n            let e = summaryElements[i];\n            e.innerHTML = '';\n            if (ul) {\n                e.className = 'validation-summary-errors';\n                e.appendChild(ul.cloneNode(true));\n            } else {\n                e.className = 'validation-summary-valid';\n            }\n        }\n    }\n\n    /**\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\n     * @param input \n     * @param message \n     */\n    addError(input: HTMLInputElement, message: string) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = message;\n                spans[i].className = 'field-validation-error';\n            }\n        }\n\n        input.classList.remove('input-validation-valid');\n        input.classList.add('input-validation-error');\n\n        let uid = this.getElementUID(input);\n        this.summary[uid] = message;\n        this.renderSummary();\n    }\n\n    /**\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\n     * @param input \n     */\n    removeError(input: HTMLInputElement) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                spans[i].className = 'field-validation-valid';\n            }\n        }\n\n        input.classList.remove('input-validation-error');\n        input.classList.add('input-validation-valid');\n\n        let uid = this.getElementUID(input);\n        delete this.summary[uid];\n        this.renderSummary();\n    }\n\n    /**\n     * Returns a validation Promise factory for an input element, using given validation directives.  \n     * @param input \n     * @param directives \n     */\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\n        return async () => {\n            for (let key in directives) {\n                let directive = directives[key];\n                let provider = this.providers[key];\n\n                if (!provider) {\n                    console.log('aspnet-validation provider not implemented: ' + key);\n                    continue;\n                }\n\n                let result = provider(input.value, input, directive.params);\n                let valid = false;\n                let error = directive.error;\n\n                if (typeof result === 'boolean') {\n                    valid = result;\n                } else if (typeof result === 'string') {\n                    valid = false;\n                    error = result;\n                } else {\n                    let resolution = await result;\n                    if (typeof resolution === 'boolean') {\n                        valid = resolution;\n                    } else {\n                        valid = false;\n                        error = resolution;\n                    }\n                }\n\n                if (!valid) {\n                    this.addError(input, error);\n                    return false;\n                }\n            }\n\n            this.removeError(input);\n            return true;\n        };\n    }\n\n    /**\n     * Load default validation providers and scans the entire document when ready.\n     */\n    bootstrap() {\n        this.addMvcProviders();\n\n        window.addEventListener('load', event => {\n            this.scanMessages();\n            this.scanInputs();\n        });\n    }\n}\n"],"sourceRoot":""}