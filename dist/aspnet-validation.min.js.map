{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/aspnet-validation.min.js","webpack:///webpack/bootstrap 45e0440c99f43428022d","webpack:///./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","value","MvcValidationProviders","ValidationService","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","verb","v","op","f","TypeError","_","y","t","label","ops","pop","trys","length","push","g","sent","throw","return","Symbol","iterator","required","element","params","Boolean","stringLength","min","parseInt","max","compare","other","otherElement","document","getElementById","substr","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","phone","remote","ok","encodeURIComponent","xtras","additionalfields","split","xtra","request","XMLHttpRequest","open","onload","status","data","JSON","parse","responseText","statusText","onerror","send","providers","messageFor","elementUIDs","formInputs","validators","elementEvents","summary","debounce","addProvider","callback","addMvcProviders","mvc","scanMessages","validationMessageElements","querySelectorAll","id","getAttribute","parseDirectives","attributes","directives","validationAtributes","cut","a","indexOf","key","parameters","keys","filter","Q","directive","error","pcut","pvalue","pkey","guid4","r","Math","random","toString","getElementUID","node","x","uid","getFormValidationTask","formUID","formInputUIDs","formValidators","inputUID","tasks","map","all","every","trackFormInput","form","_this","cb","validate","success","preventDefault","catch","console","log","addEventListener","addInput","input","createValidator","delay","clearTimeout","setTimeout","tagName","toLowerCase","scanInputs","inputs","createSummaryDOM","ul","createElement","li","innerHTML","appendChild","renderSummary","summaryElements","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","spans","classList","remove","add","removeError","_a","_b","_i","provider","valid","resolution","_c","bootstrap","event"],"mappings":"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","file":"./dist/aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MvcValidationProviders\", function() { return MvcValidationProviders; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValidationService\", function() { return ValidationService; });\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n/**\r\n * Contains default implementations for ASP.NET Core MVC validation attributes.\r\n */\r\nvar MvcValidationProviders = /** @class */ (function () {\r\n    function MvcValidationProviders() {\r\n        /**\r\n         * Validates whether the input has a value.\r\n         */\r\n        this.required = function (value, element, params) {\r\n            return Boolean(value);\r\n        };\r\n        /**\r\n         * Validates whether the input value satisfies the length contstraint.\r\n         */\r\n        this.stringLength = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            if (params.min) {\r\n                var min = parseInt(params.min);\r\n                if (value.length < min) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (params.max) {\r\n                var max = parseInt(params.max);\r\n                if (value.length > max) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * Validates whether the input value is equal to another input value.\r\n         */\r\n        this.compare = function (value, element, params) {\r\n            if (!params.other) {\r\n                return true;\r\n            }\r\n            // Sample other parameter: \"*.Name\"\r\n            // Wat?\r\n            var otherElement = document.getElementById(params.other.substr(2));\r\n            if (!otherElement) {\r\n                return true;\r\n            }\r\n            return (otherElement.value === value);\r\n        };\r\n        /**\r\n         * Validates whether the input value is a number within a given range.\r\n         */\r\n        this.range = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            var val = parseFloat(value);\r\n            if (isNaN(val)) {\r\n                return false;\r\n            }\r\n            if (params.min) {\r\n                var min = parseFloat(params.min);\r\n                if (val < min) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (params.max) {\r\n                var max = parseFloat(params.max);\r\n                if (val > max) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * Validates whether the input value satisfies a regular expression pattern.\r\n         */\r\n        this.regex = function (value, element, params) {\r\n            if (!value || !params.pattern) {\r\n                return true;\r\n            }\r\n            var r = new RegExp(params.pattern);\r\n            return r.test(value);\r\n        };\r\n        /**\r\n         * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\r\n         */\r\n        this.email = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            // RFC822 email address with .TLD validation\r\n            // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\r\n            // https://gist.github.com/badsyntax/719800\r\n            // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\r\n            var r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\r\n            return r.test(value);\r\n        };\r\n        /**\r\n         * Validates whether the input value is a credit card number, with Luhn's Algorithm.\r\n         */\r\n        this.creditcard = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            // (c) jquery-validation, MIT Licensed\r\n            // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\r\n            // based on https://en.wikipedia.org/wiki/Luhn_algorithm\r\n            // Accept only spaces, digits and dashes\r\n            if (/[^0-9 \\-]+/.test(value)) {\r\n                return false;\r\n            }\r\n            var nCheck = 0, nDigit = 0, bEven = false, n, cDigit;\r\n            value = value.replace(/\\D/g, \"\");\r\n            // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\r\n            if (value.length < 13 || value.length > 19) {\r\n                return false;\r\n            }\r\n            for (n = value.length - 1; n >= 0; n--) {\r\n                cDigit = value.charAt(n);\r\n                nDigit = parseInt(cDigit, 10);\r\n                if (bEven) {\r\n                    if ((nDigit *= 2) > 9) {\r\n                        nDigit -= 9;\r\n                    }\r\n                }\r\n                nCheck += nDigit;\r\n                bEven = !bEven;\r\n            }\r\n            return (nCheck % 10) === 0;\r\n        };\r\n        /**\r\n         * Validates whether the input value is a URL.\r\n         */\r\n        this.url = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            // (c) Diego Perini, MIT Licensed\r\n            // https://gist.github.com/dperini/729294\r\n            var r = new RegExp(\"^\" +\r\n                // protocol identifier\r\n                \"(?:(?:https?|ftp)://)\" +\r\n                // user:pass authentication\r\n                \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n                \"(?:\" +\r\n                // IP address exclusion\r\n                // private & local networks\r\n                \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n                \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n                \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\r\n                // IP address dotted notation octets\r\n                // excludes loopback network 0.0.0.0\r\n                // excludes reserved space >= 224.0.0.0\r\n                // excludes network & broacast addresses\r\n                // (first & last IP address of each class)\r\n                \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n                \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n                \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n                \"|\" +\r\n                // host name\r\n                \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n                // domain name\r\n                \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n                // TLD identifier\r\n                \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n                // TLD may end with dot\r\n                \"\\\\.?\" +\r\n                \")\" +\r\n                // port number\r\n                \"(?::\\\\d{2,5})?\" +\r\n                // resource path\r\n                \"(?:[/?#]\\\\S*)?\" +\r\n                \"$\", \"i\");\r\n            return r.test(value);\r\n        };\r\n        /**\r\n         * Validates whether the input value is a phone number.\r\n         */\r\n        this.phone = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            // Allows whitespace or dash as number separator because some people like to do that...\r\n            var consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\r\n            if (consecutiveSeparator.test(value)) {\r\n                return false;\r\n            }\r\n            var r = /^\\+?[0-9\\-\\s]+$/;\r\n            return r.test(value);\r\n        };\r\n        /**\r\n         * Asynchronously validates the input value to a JSON GET API endpoint.\r\n         */\r\n        this.remote = function (value, element, params) {\r\n            if (!value) {\r\n                return true;\r\n            }\r\n            return new Promise(function (ok, reject) {\r\n                var url = params['url'] + '?' + element.name + '=' + encodeURIComponent(value);\r\n                // params.additionalfields: *.Email,*.Username\r\n                var xtras = params.additionalfields.split(',');\r\n                for (var i = 0; i < xtras.length; i++) {\r\n                    var xtra = xtras[i].substr(2);\r\n                    if (xtra === element.name) {\r\n                        continue;\r\n                    }\r\n                    var e = document.getElementById(xtra);\r\n                    if (!e || !e.value) {\r\n                        continue;\r\n                    }\r\n                    url = url + '&' + e.name + '=' + encodeURIComponent(e.value);\r\n                }\r\n                var request = new XMLHttpRequest();\r\n                request.open('get', url);\r\n                request.onload = function (e) {\r\n                    if (request.status >= 200 && request.status < 300) {\r\n                        var data = JSON.parse(request.responseText);\r\n                        ok(data);\r\n                    }\r\n                    else {\r\n                        reject({\r\n                            status: request.status,\r\n                            statusText: request.statusText,\r\n                            data: request.responseText\r\n                        });\r\n                    }\r\n                };\r\n                request.onerror = function (e) {\r\n                    reject({\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        data: request.responseText\r\n                    });\r\n                };\r\n                request.send();\r\n            });\r\n        };\r\n    }\r\n    return MvcValidationProviders;\r\n}());\r\n\r\n/**\r\n * Responsibles for managing the DOM elements and running the validation providers.\r\n */\r\nvar ValidationService = /** @class */ (function () {\r\n    function ValidationService() {\r\n        /**\r\n         * A key-value collection of loaded validation plugins.\r\n         */\r\n        this.providers = {};\r\n        /**\r\n         * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\r\n         */\r\n        this.messageFor = {};\r\n        /**\r\n         * A list of managed elements, each having a randomly assigned unique identifier (UID).\r\n         */\r\n        this.elementUIDs = [];\r\n        /**\r\n         * A key-value collection of input UIDs for a <form> UID.\r\n         */\r\n        this.formInputs = {};\r\n        /**\r\n         * A key-value map for input UID to its validator factory.\r\n         */\r\n        this.validators = {};\r\n        /**\r\n         * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\r\n         */\r\n        this.elementEvents = {};\r\n        /**\r\n         * A key-value map of input UID to its validation error message.\r\n         */\r\n        this.summary = {};\r\n        /**\r\n         * In milliseconds, the rate of fire of the input validation.\r\n         */\r\n        this.debounce = 300;\r\n    }\r\n    /**\r\n     * Registers a new validation plugin of the given name, if not registered yet.\r\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\r\n     * @param name\r\n     * @param callback\r\n     */\r\n    ValidationService.prototype.addProvider = function (name, callback) {\r\n        if (this.providers[name]) {\r\n            // First-Come-First-Serve validation plugin design.\r\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\r\n            return;\r\n        }\r\n        this.providers[name] = callback;\r\n    };\r\n    /**\r\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation.\r\n     */\r\n    ValidationService.prototype.addMvcProviders = function () {\r\n        var mvc = new MvcValidationProviders();\r\n        // [Required]\r\n        this.addProvider('required', mvc.required);\r\n        // [StringLength], [MinLength], [MaxLength]\r\n        this.addProvider('length', mvc.stringLength);\r\n        this.addProvider('maxlength', mvc.stringLength);\r\n        this.addProvider('minlength', mvc.stringLength);\r\n        // [Compare]\r\n        this.addProvider('equalto', mvc.compare);\r\n        // [Range]\r\n        this.addProvider('range', mvc.range);\r\n        // [RegularExpression]\r\n        this.addProvider('regex', mvc.regex);\r\n        // [CreditCard]\r\n        this.addProvider('creditcard', mvc.creditcard);\r\n        // [EmailAddress]\r\n        this.addProvider('email', mvc.email);\r\n        // [Url]\r\n        this.addProvider('url', mvc.url);\r\n        // [Phone]\r\n        this.addProvider('phone', mvc.phone);\r\n        // [Remote]\r\n        this.addProvider('remote', mvc.remote);\r\n    };\r\n    /**\r\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\r\n     */\r\n    ValidationService.prototype.scanMessages = function () {\r\n        var validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\r\n        for (var i = 0; i < validationMessageElements.length; i++) {\r\n            var e = validationMessageElements[i];\r\n            var id = e.getAttribute('data-valmsg-for');\r\n            if (!this.messageFor[id]) {\r\n                this.messageFor[id] = [];\r\n            }\r\n            this.messageFor[id].push(e);\r\n        }\r\n    };\r\n    /**\r\n     * Given attribute map for an HTML input, returns the validation directives to be executed.\r\n     * @param attributes\r\n     */\r\n    ValidationService.prototype.parseDirectives = function (attributes) {\r\n        var directives = {};\r\n        var validationAtributes = {};\r\n        var cut = 'data-val-'.length;\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            var a = attributes[i];\r\n            if (a.name.indexOf('data-val-') === 0) {\r\n                var key = a.name.substr(cut);\r\n                validationAtributes[key] = a.value;\r\n            }\r\n        }\r\n        var _loop_1 = function (key) {\r\n            if (key.indexOf('-') === -1) {\r\n                var parameters = Object.keys(validationAtributes).filter(function (Q) {\r\n                    return (Q !== key) && (Q.indexOf(key) === 0);\r\n                });\r\n                var directive = {\r\n                    error: validationAtributes[key],\r\n                    params: {}\r\n                };\r\n                var pcut = (key + '-').length;\r\n                for (var i = 0; i < parameters.length; i++) {\r\n                    var pvalue = validationAtributes[parameters[i]];\r\n                    var pkey = parameters[i].substr(pcut);\r\n                    directive.params[pkey] = pvalue;\r\n                }\r\n                directives[key] = directive;\r\n            }\r\n        };\r\n        for (var key in validationAtributes) {\r\n            _loop_1(key);\r\n        }\r\n        // console.log(directives);\r\n        return directives;\r\n    };\r\n    /**\r\n     *  Returns an RFC4122 version 4 compliant GUID.\r\n     */\r\n    ValidationService.prototype.guid4 = function () {\r\n        // (c) broofa, MIT Licensed\r\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    /**\r\n     * Gets a UID for an DOM element.\r\n     * @param node\r\n     */\r\n    ValidationService.prototype.getElementUID = function (node) {\r\n        var x = this.elementUIDs.filter(function (e) {\r\n            return e.node === node;\r\n        })[0];\r\n        if (x) {\r\n            return x.uid;\r\n        }\r\n        var uid = this.guid4();\r\n        this.elementUIDs.push({\r\n            node: node,\r\n            uid: uid\r\n        });\r\n        return uid;\r\n    };\r\n    /**\r\n     * Returns a Promise that returns validation result for each and every inputs within the form.\r\n     * @param formUID\r\n     */\r\n    ValidationService.prototype.getFormValidationTask = function (formUID) {\r\n        var formInputUIDs = this.formInputs[formUID];\r\n        if (!formInputUIDs || formInputUIDs.length === 0) {\r\n            return null;\r\n        }\r\n        var formValidators = [];\r\n        for (var i = 0; i < formInputUIDs.length; i++) {\r\n            var inputUID = formInputUIDs[i];\r\n            formValidators.push(this.validators[inputUID]);\r\n        }\r\n        var tasks = formValidators.map(function (factory) { return factory(); });\r\n        return Promise.all(tasks).then(function (result) { return result.every(function (e) { return e; }); });\r\n    };\r\n    /**\r\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\r\n     * @param form\r\n     * @param inputUID\r\n     */\r\n    ValidationService.prototype.trackFormInput = function (form, inputUID) {\r\n        var _this = this;\r\n        var formUID = this.getElementUID(form);\r\n        if (!this.formInputs[formUID]) {\r\n            this.formInputs[formUID] = [];\r\n        }\r\n        var add = (this.formInputs[formUID].indexOf(inputUID) === -1);\r\n        if (add) {\r\n            this.formInputs[formUID].push(inputUID);\r\n        }\r\n        if (this.elementEvents[formUID]) {\r\n            return;\r\n        }\r\n        var cb = function (e) {\r\n            var validate = _this.getFormValidationTask(formUID);\r\n            if (!validate) {\r\n                return;\r\n            }\r\n            validate.then(function (success) {\r\n                if (!success) {\r\n                    e.preventDefault();\r\n                }\r\n            }).catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        };\r\n        form.addEventListener('submit', cb);\r\n        this.elementEvents[formUID] = cb;\r\n    };\r\n    /**\r\n     * Adds an input element to be managed and validated by the service.\r\n     * Triggers a debounced live validation when input value changes.\r\n     * @param input\r\n     */\r\n    ValidationService.prototype.addInput = function (input) {\r\n        var _this = this;\r\n        var uid = this.getElementUID(input);\r\n        var directives = this.parseDirectives(input.attributes);\r\n        var validate = this.createValidator(input, directives);\r\n        this.validators[uid] = validate;\r\n        this.trackFormInput(input.form, uid);\r\n        if (this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n        var delay;\r\n        var cb = function (e) {\r\n            var validate = _this.validators[uid];\r\n            clearTimeout(delay);\r\n            delay = setTimeout(validate, _this.debounce);\r\n        };\r\n        var isDropdown = input.tagName.toLowerCase() === 'select';\r\n        if (isDropdown) {\r\n            input.addEventListener('change', cb);\r\n        }\r\n        else {\r\n            input.addEventListener('input', cb);\r\n        }\r\n        this.elementEvents[uid] = cb;\r\n    };\r\n    /**\r\n     * Scans the entire document for input elements to be validated.\r\n     */\r\n    ValidationService.prototype.scanInputs = function () {\r\n        var inputs = document.querySelectorAll('[data-val=\"true\"]');\r\n        for (var i = 0; i < inputs.length; i++) {\r\n            var input = inputs[i];\r\n            this.addInput(input);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a <ul> element as a validation errors summary.\r\n     */\r\n    ValidationService.prototype.createSummaryDOM = function () {\r\n        if (!Object.keys(this.summary).length) {\r\n            return null;\r\n        }\r\n        var ul = document.createElement('ul');\r\n        for (var key in this.summary) {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = this.summary[key];\r\n            ul.appendChild(li);\r\n        }\r\n        return ul;\r\n    };\r\n    /**\r\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\r\n     */\r\n    ValidationService.prototype.renderSummary = function () {\r\n        var summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\r\n        if (!summaryElements.length) {\r\n            return;\r\n        }\r\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\r\n        var shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\r\n        if (shadow === this.renderedSummaryJSON) {\r\n            return;\r\n        }\r\n        // Prevents wasteful re-rendering of summary list element with identical items!\r\n        // console.log('RENDERING VALIDATION SUMMARY');\r\n        this.renderedSummaryJSON = shadow;\r\n        var ul = this.createSummaryDOM();\r\n        for (var i = 0; i < summaryElements.length; i++) {\r\n            var e = summaryElements[i];\r\n            e.innerHTML = '';\r\n            if (ul) {\r\n                e.className = 'validation-summary-error';\r\n                e.appendChild(ul.cloneNode(true));\r\n            }\r\n            else {\r\n                e.className = 'validation-summary-valid';\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input\r\n     * @param message\r\n     */\r\n    ValidationService.prototype.addError = function (input, message) {\r\n        var spans = this.messageFor[input.id];\r\n        if (spans) {\r\n            for (var i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = message;\r\n                spans[i].className = 'field-validation-error';\r\n            }\r\n        }\r\n        input.classList.remove('input-validation-valid');\r\n        input.classList.add('input-validation-error');\r\n        var uid = this.getElementUID(input);\r\n        this.summary[uid] = message;\r\n        this.renderSummary();\r\n    };\r\n    /**\r\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input\r\n     */\r\n    ValidationService.prototype.removeError = function (input) {\r\n        var spans = this.messageFor[input.id];\r\n        if (spans) {\r\n            for (var i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = '';\r\n                spans[i].className = 'field-validation-valid';\r\n            }\r\n        }\r\n        input.classList.remove('input-validation-error');\r\n        input.classList.add('input-validation-valid');\r\n        var uid = this.getElementUID(input);\r\n        delete this.summary[uid];\r\n        this.renderSummary();\r\n    };\r\n    /**\r\n     * Returns a validation Promise factory for an input element, using given validation directives.\r\n     * @param input\r\n     * @param directives\r\n     */\r\n    ValidationService.prototype.createValidator = function (input, directives) {\r\n        var _this = this;\r\n        return function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a, _b, _i, key, directive, provider, result, valid, error, resolution;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        _a = [];\r\n                        for (_b in directives)\r\n                            _a.push(_b);\r\n                        _i = 0;\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        if (!(_i < _a.length)) return [3 /*break*/, 7];\r\n                        key = _a[_i];\r\n                        directive = directives[key];\r\n                        provider = this.providers[key];\r\n                        if (!provider) {\r\n                            console.log('aspnet-validation provider not implemented: ' + key);\r\n                            return [3 /*break*/, 6];\r\n                        }\r\n                        result = provider(input.value, input, directive.params);\r\n                        valid = false;\r\n                        error = directive.error;\r\n                        if (!(typeof result === 'boolean')) return [3 /*break*/, 2];\r\n                        valid = result;\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(typeof result === 'string')) return [3 /*break*/, 3];\r\n                        valid = false;\r\n                        error = result;\r\n                        return [3 /*break*/, 5];\r\n                    case 3: return [4 /*yield*/, result];\r\n                    case 4:\r\n                        resolution = _c.sent();\r\n                        if (typeof resolution === 'boolean') {\r\n                            valid = resolution;\r\n                        }\r\n                        else {\r\n                            valid = false;\r\n                            error = resolution;\r\n                        }\r\n                        _c.label = 5;\r\n                    case 5:\r\n                        if (!valid) {\r\n                            this.addError(input, error);\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        _c.label = 6;\r\n                    case 6:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 7:\r\n                        this.removeError(input);\r\n                        return [2 /*return*/, true];\r\n                }\r\n            });\r\n        }); };\r\n    };\r\n    /**\r\n     * Load default validation providers and scans the entire document when ready.\r\n     */\r\n    ValidationService.prototype.bootstrap = function () {\r\n        var _this = this;\r\n        this.addMvcProviders();\r\n        document.addEventListener('DOMContentLoaded', function (event) {\r\n            _this.scanMessages();\r\n            _this.scanInputs();\r\n        });\r\n    };\r\n    return ValidationService;\r\n}());\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// dist/aspnet-validation.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 45e0440c99f43428022d","/**\r\n * A simple IDictionary<string, string>\r\n */\r\nexport interface StringKeyValuePair {\r\n    [key: string]: string\r\n}\r\n\r\n/**\r\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\r\n */\r\ninterface ElementUID {\r\n    node: Element,\r\n    uid: string;\r\n}\r\n\r\n/**\r\n * Parameters passed into validation providers from the element attributes.\r\n * error property is read from data-val-[Provider Name] attribute.\r\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\r\n */\r\nexport interface ValidationDirectiveBindings {\r\n    error: string,\r\n    params: StringKeyValuePair\r\n}\r\n\r\n/**\r\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\r\n */\r\nexport type ValidationDirective = {\r\n    [key: string]: ValidationDirectiveBindings\r\n};\r\n\r\n/**\r\n * Validation plugin signature with multitype return.\r\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\r\n * String return signifies failed validation, which then will be used as the validation error message.\r\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\r\n */\r\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\r\n\r\n/**\r\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\r\n */\r\ntype Validator = () => Promise<boolean>;\r\n\r\n/**\r\n * Contains default implementations for ASP.NET Core MVC validation attributes.\r\n */\r\nexport class MvcValidationProviders {\r\n    /**\r\n     * Validates whether the input has a value.\r\n     */\r\n    required: ValidationProvider = (value, element, params) => {\r\n        return Boolean(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies the length contstraint.\r\n     */\r\n    stringLength: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseInt(params.min);\r\n            if (value.length < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseInt(params.max);\r\n            if (value.length > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is equal to another input value.\r\n     */\r\n    compare: ValidationProvider = (value, element, params) => {\r\n        if (!params.other) {\r\n            return true;\r\n        }\r\n\r\n        // Sample other parameter: \"*.Name\"\r\n        // Wat?\r\n        let otherElement = document.getElementById(params.other.substr(2)) as HTMLInputElement;\r\n        if (!otherElement) {\r\n            return true;\r\n        }\r\n\r\n        return (otherElement.value === value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a number within a given range.\r\n     */\r\n    range: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        let val = parseFloat(value);\r\n        if (isNaN(val)) {\r\n            return false;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseFloat(params.min);\r\n            if (val < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseFloat(params.max);\r\n            if (val > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies a regular expression pattern.\r\n     */\r\n    regex: ValidationProvider = (value, element, params) => {\r\n        if (!value || !params.pattern) {\r\n            return true;\r\n        }\r\n\r\n        let r = new RegExp(params.pattern);\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\r\n     */\r\n    email: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // RFC822 email address with .TLD validation\r\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\r\n        // https://gist.github.com/badsyntax/719800\r\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\r\n\r\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\r\n     */\r\n    creditcard: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) jquery-validation, MIT Licensed\r\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\r\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\r\n\r\n        // Accept only spaces, digits and dashes\r\n        if (/[^0-9 \\-]+/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        var nCheck = 0,\r\n            nDigit = 0,\r\n            bEven = false,\r\n            n, cDigit;\r\n\r\n        value = value.replace(/\\D/g, \"\");\r\n\r\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\r\n        if (value.length < 13 || value.length > 19) {\r\n            return false;\r\n        }\r\n\r\n        for (n = value.length - 1; n >= 0; n--) {\r\n            cDigit = value.charAt(n);\r\n            nDigit = parseInt(cDigit, 10);\r\n            if (bEven) {\r\n                if ((nDigit *= 2) > 9) {\r\n                    nDigit -= 9;\r\n                }\r\n            }\r\n\r\n            nCheck += nDigit;\r\n            bEven = !bEven;\r\n        }\r\n\r\n        return (nCheck % 10) === 0;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a URL.\r\n     */\r\n    url: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) Diego Perini, MIT Licensed\r\n        // https://gist.github.com/dperini/729294\r\n\r\n        var r = new RegExp(\r\n            \"^\" +\r\n            // protocol identifier\r\n            \"(?:(?:https?|ftp)://)\" +\r\n            // user:pass authentication\r\n            \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n            \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n            \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n            \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n            \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n            // TLD may end with dot\r\n            \"\\\\.?\" +\r\n            \")\" +\r\n            // port number\r\n            \"(?::\\\\d{2,5})?\" +\r\n            // resource path\r\n            \"(?:[/?#]\\\\S*)?\" +\r\n            \"$\", \"i\"\r\n        );\r\n\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a phone number.\r\n     */\r\n    phone: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // Allows whitespace or dash as number separator because some people like to do that...\r\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\r\n        if (consecutiveSeparator.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        let r = /^\\+?[0-9\\-\\s]+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously validates the input value to a JSON GET API endpoint. \r\n     */\r\n    remote: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        return new Promise((ok, reject) => {\r\n            let url = params['url'] + '?' + element.name + '=' + encodeURIComponent(value);\r\n\r\n            // params.additionalfields: *.Email,*.Username\r\n            let xtras = (params.additionalfields as string).split(',');\r\n\r\n            for (let i = 0; i < xtras.length; i++) {\r\n                let xtra = xtras[i].substr(2);\r\n                if (xtra === element.name) {\r\n                    continue;\r\n                }\r\n\r\n                let e = document.getElementById(xtra) as HTMLInputElement;\r\n                if (!e || !e.value) {\r\n                    continue;\r\n                }\r\n\r\n                url = url + '&' + e.name + '=' + encodeURIComponent(e.value);\r\n            }\r\n\r\n            var request = new XMLHttpRequest();\r\n            request.open('get', url);\r\n\r\n            request.onload = e => {\r\n                if (request.status >= 200 && request.status < 300) {\r\n                    let data = JSON.parse(request.responseText);\r\n                    ok(data);\r\n                } else {\r\n                    reject({\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        data: request.responseText\r\n                    });\r\n                }\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject({\r\n                    status: request.status,\r\n                    statusText: request.statusText,\r\n                    data: request.responseText\r\n                });\r\n            };\r\n\r\n            request.send();\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Responsibles for managing the DOM elements and running the validation providers.\r\n */\r\nexport class ValidationService {\r\n    /**\r\n     * A key-value collection of loaded validation plugins. \r\n     */\r\n    private providers: { [name: string]: ValidationProvider } = {};\r\n\r\n    /**\r\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\r\n     */\r\n    private messageFor: { [id: string]: Element[] } = {};\r\n\r\n    /**\r\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\r\n     */\r\n    private elementUIDs: ElementUID[] = [];\r\n\r\n    /**\r\n     * A key-value collection of input UIDs for a <form> UID.\r\n     */\r\n    private formInputs: { [formUID: string]: string[] } = {};\r\n\r\n    /**\r\n     * A key-value map for input UID to its validator factory.\r\n     */\r\n    private validators: { [inputUID: string]: Validator } = {};\r\n\r\n    /**\r\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\r\n     */\r\n    private elementEvents: { [id: string]: (Event) => any } = {};\r\n\r\n    /**\r\n     * A key-value map of input UID to its validation error message.\r\n     */\r\n    private summary: StringKeyValuePair = {};\r\n\r\n    /**\r\n     * A serialized representation of the validation error message summary rendered to the user.\r\n     */\r\n    private renderedSummaryJSON: string;\r\n\r\n    /**\r\n     * In milliseconds, the rate of fire of the input validation.\r\n     */\r\n    debounce = 300;\r\n\r\n    /**\r\n     * Registers a new validation plugin of the given name, if not registered yet.\r\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\r\n     * @param name \r\n     * @param callback \r\n     */\r\n    addProvider(name: string, callback: ValidationProvider) {\r\n        if (this.providers[name]) {\r\n            // First-Come-First-Serve validation plugin design.\r\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\r\n            return;\r\n        }\r\n        this.providers[name] = callback;\r\n    }\r\n\r\n    /**\r\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation. \r\n     */\r\n    private addMvcProviders() {\r\n        let mvc = new MvcValidationProviders();\r\n\r\n        // [Required]\r\n        this.addProvider('required', mvc.required);\r\n        // [StringLength], [MinLength], [MaxLength]\r\n        this.addProvider('length', mvc.stringLength);\r\n        this.addProvider('maxlength', mvc.stringLength);\r\n        this.addProvider('minlength', mvc.stringLength);\r\n        // [Compare]\r\n        this.addProvider('equalto', mvc.compare);\r\n        // [Range]\r\n        this.addProvider('range', mvc.range);\r\n        // [RegularExpression]\r\n        this.addProvider('regex', mvc.regex);\r\n        // [CreditCard]\r\n        this.addProvider('creditcard', mvc.creditcard);\r\n        // [EmailAddress]\r\n        this.addProvider('email', mvc.email);\r\n        // [Url]\r\n        this.addProvider('url', mvc.url);\r\n        // [Phone]\r\n        this.addProvider('phone', mvc.phone);\r\n        // [Remote]\r\n        this.addProvider('remote', mvc.remote);\r\n    }\r\n\r\n    /**\r\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\r\n     */\r\n    private scanMessages() {\r\n        let validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\r\n\r\n        for (let i = 0; i < validationMessageElements.length; i++) {\r\n            let e = validationMessageElements[i];\r\n            let id = e.getAttribute('data-valmsg-for');\r\n\r\n            if (!this.messageFor[id]) {\r\n                this.messageFor[id] = [];\r\n            }\r\n\r\n            this.messageFor[id].push(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given attribute map for an HTML input, returns the validation directives to be executed. \r\n     * @param attributes \r\n     */\r\n    parseDirectives(attributes: NamedNodeMap) {\r\n        let directives: ValidationDirective = {};\r\n        let validationAtributes: StringKeyValuePair = {};\r\n\r\n        let cut = 'data-val-'.length;\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            let a = attributes[i];\r\n            if (a.name.indexOf('data-val-') === 0) {\r\n                let key = a.name.substr(cut);\r\n                validationAtributes[key] = a.value;\r\n            }\r\n        }\r\n\r\n        for (let key in validationAtributes) {\r\n            if (key.indexOf('-') === -1) {\r\n                let parameters = Object.keys(validationAtributes).filter(Q => {\r\n                    return (Q !== key) && (Q.indexOf(key) === 0);\r\n                });\r\n\r\n                let directive: ValidationDirectiveBindings = {\r\n                    error: validationAtributes[key],\r\n                    params: {}\r\n                };\r\n\r\n                let pcut = (key + '-').length;\r\n                for (let i = 0; i < parameters.length; i++) {\r\n                    let pvalue = validationAtributes[parameters[i]];\r\n                    let pkey = parameters[i].substr(pcut);\r\n\r\n                    directive.params[pkey] = pvalue;\r\n                }\r\n\r\n                directives[key] = directive;\r\n            }\r\n        }\r\n\r\n        // console.log(directives);\r\n        return directives;\r\n    }\r\n\r\n    /**\r\n     *  Returns an RFC4122 version 4 compliant GUID.\r\n     */\r\n    private guid4() {\r\n        // (c) broofa, MIT Licensed\r\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a UID for an DOM element.\r\n     * @param node \r\n     */\r\n    private getElementUID(node: Element) {\r\n        let x = this.elementUIDs.filter(e => {\r\n            return e.node === node;\r\n        })[0];\r\n\r\n        if (x) {\r\n            return x.uid;\r\n        }\r\n\r\n        let uid = this.guid4();\r\n        this.elementUIDs.push({\r\n            node: node,\r\n            uid: uid\r\n        });\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise that returns validation result for each and every inputs within the form.\r\n     * @param formUID \r\n     */\r\n    private getFormValidationTask(formUID: string) {\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        if (!formInputUIDs || formInputUIDs.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let formValidators: Validator[] = [];\r\n\r\n        for (let i = 0; i < formInputUIDs.length; i++) {\r\n            let inputUID = formInputUIDs[i];\r\n            formValidators.push(this.validators[inputUID]);\r\n        }\r\n\r\n        let tasks = formValidators.map(factory => factory());\r\n        return Promise.all(tasks).then(result => result.every(e => e));\r\n    }\r\n\r\n    /**\r\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\r\n     * @param form \r\n     * @param inputUID \r\n     */\r\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\r\n        let formUID = this.getElementUID(form);\r\n        if (!this.formInputs[formUID]) {\r\n            this.formInputs[formUID] = [];\r\n        }\r\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\r\n        if (add) {\r\n            this.formInputs[formUID].push(inputUID);\r\n        }\r\n\r\n        if (this.elementEvents[formUID]) {\r\n            return;\r\n        }\r\n\r\n        let cb = e => {\r\n            let validate = this.getFormValidationTask(formUID);\r\n            if (!validate) {\r\n                return;\r\n            }\r\n\r\n            validate.then(success => {\r\n                if (!success) {\r\n                    e.preventDefault();\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n        };\r\n\r\n        form.addEventListener('submit', cb);\r\n        this.elementEvents[formUID] = cb;\r\n    }\r\n\r\n    /**\r\n     * Adds an input element to be managed and validated by the service.\r\n     * Triggers a debounced live validation when input value changes.\r\n     * @param input \r\n     */\r\n    addInput(input: HTMLInputElement) {\r\n        let uid = this.getElementUID(input);\r\n\r\n        let directives = this.parseDirectives(input.attributes);\r\n        let validate = this.createValidator(input, directives);\r\n\r\n        this.validators[uid] = validate;\r\n        this.trackFormInput(input.form, uid);\r\n\r\n        if (this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n\r\n        let delay;\r\n        let cb = e => {\r\n            let validate = this.validators[uid];\r\n            clearTimeout(delay);\r\n            delay = setTimeout(validate, this.debounce);\r\n        };\r\n\r\n        let isDropdown = input.tagName.toLowerCase() === 'select';\r\n        if (isDropdown) {\r\n            input.addEventListener('change', cb);\r\n        } else {\r\n            input.addEventListener('input', cb);\r\n        }\r\n\r\n        this.elementEvents[uid] = cb;\r\n    }\r\n\r\n    /**\r\n     * Scans the entire document for input elements to be validated.\r\n     */\r\n    private scanInputs() {\r\n        let inputs = document.querySelectorAll('[data-val=\"true\"]');\r\n\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i] as HTMLInputElement;\r\n            this.addInput(input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a <ul> element as a validation errors summary.\r\n     */\r\n    createSummaryDOM() {\r\n        if (!Object.keys(this.summary).length) {\r\n            return null;\r\n        }\r\n\r\n        let ul = document.createElement('ul');\r\n        for (let key in this.summary) {\r\n            let li = document.createElement('li');\r\n            li.innerHTML = this.summary[key];\r\n            ul.appendChild(li);\r\n        }\r\n        return ul;\r\n    }\r\n\r\n    /**\r\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\r\n     */\r\n    private renderSummary() {\r\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\r\n        if (!summaryElements.length) {\r\n            return;\r\n        }\r\n\r\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\r\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\r\n        if (shadow === this.renderedSummaryJSON) {\r\n            return;\r\n        }\r\n\r\n        // Prevents wasteful re-rendering of summary list element with identical items!\r\n        // console.log('RENDERING VALIDATION SUMMARY');\r\n        this.renderedSummaryJSON = shadow;\r\n        let ul = this.createSummaryDOM();\r\n\r\n        for (let i = 0; i < summaryElements.length; i++) {\r\n            let e = summaryElements[i];\r\n            e.innerHTML = '';\r\n            if (ul) {\r\n                e.className = 'validation-summary-error';\r\n                e.appendChild(ul.cloneNode(true));\r\n            } else {\r\n                e.className = 'validation-summary-valid';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     * @param message \r\n     */\r\n    addError(input: HTMLInputElement, message: string) {\r\n        let spans = this.messageFor[input.id];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = message;\r\n                spans[i].className = 'field-validation-error';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-valid');\r\n        input.classList.add('input-validation-error');\r\n\r\n        let uid = this.getElementUID(input);\r\n        this.summary[uid] = message;\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     */\r\n    removeError(input: HTMLInputElement) {\r\n        let spans = this.messageFor[input.id];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = '';\r\n                spans[i].className = 'field-validation-valid';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-error');\r\n        input.classList.add('input-validation-valid');\r\n\r\n        let uid = this.getElementUID(input);\r\n        delete this.summary[uid];\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Returns a validation Promise factory for an input element, using given validation directives.  \r\n     * @param input \r\n     * @param directives \r\n     */\r\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\r\n        return async () => {\r\n            for (let key in directives) {\r\n                let directive = directives[key];\r\n                let provider = this.providers[key];\r\n\r\n                if (!provider) {\r\n                    console.log('aspnet-validation provider not implemented: ' + key);\r\n                    continue;\r\n                }\r\n\r\n                let result = provider(input.value, input, directive.params);\r\n                let valid = false;\r\n                let error = directive.error;\r\n\r\n                if (typeof result === 'boolean') {\r\n                    valid = result;\r\n                } else if (typeof result === 'string') {\r\n                    valid = false;\r\n                    error = result;\r\n                } else {\r\n                    let resolution = await result;\r\n                    if (typeof resolution === 'boolean') {\r\n                        valid = resolution;\r\n                    } else {\r\n                        valid = false;\r\n                        error = resolution;\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    this.addError(input, error);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this.removeError(input);\r\n            return true;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Load default validation providers and scans the entire document when ready.\r\n     */\r\n    bootstrap() {\r\n        this.addMvcProviders();\r\n\r\n        document.addEventListener('DOMContentLoaded', event => {\r\n            this.scanMessages();\r\n            this.scanInputs();\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}